// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// ebm_cpp
Rcpp::NumericVector ebm_cpp(Rcpp::NumericVector criterion, Rcpp::NumericMatrix features, Rcpp::NumericVector w, double r, double q, double lambda, Rcpp::NumericVector b, Rcpp::NumericVector wf, int lastLearnTrial, int firstOutTrial);
RcppExport SEXP _cognitivemodels_ebm_cpp(SEXP criterionSEXP, SEXP featuresSEXP, SEXP wSEXP, SEXP rSEXP, SEXP qSEXP, SEXP lambdaSEXP, SEXP bSEXP, SEXP wfSEXP, SEXP lastLearnTrialSEXP, SEXP firstOutTrialSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type criterion(criterionSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type features(featuresSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type w(wSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type wf(wfSEXP);
    Rcpp::traits::input_parameter< int >::type lastLearnTrial(lastLearnTrialSEXP);
    Rcpp::traits::input_parameter< int >::type firstOutTrial(firstOutTrialSEXP);
    rcpp_result_gen = Rcpp::wrap(ebm_cpp(criterion, features, w, r, q, lambda, b, wf, lastLearnTrial, firstOutTrial));
    return rcpp_result_gen;
END_RCPP
}
// lexicographic
NumericMatrix lexicographic(NumericMatrix I);
RcppExport SEXP _cognitivemodels_lexicographic(SEXP ISEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type I(ISEXP);
    rcpp_result_gen = Rcpp::wrap(lexicographic(I));
    return rcpp_result_gen;
END_RCPP
}
// indicators
NumericMatrix indicators(arma::mat features, NumericVector splitcriteria);
RcppExport SEXP _cognitivemodels_indicators(SEXP featuresSEXP, SEXP splitcriteriaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type features(featuresSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type splitcriteria(splitcriteriaSEXP);
    rcpp_result_gen = Rcpp::wrap(indicators(features, splitcriteria));
    return rcpp_result_gen;
END_RCPP
}
// shortfall_cpp
Rcpp::NumericVector shortfall_cpp(Rcpp::NumericMatrix x, Rcpp::NumericMatrix p, Rcpp::NumericVector a, double beta, double delta);
RcppExport SEXP _cognitivemodels_shortfall_cpp(SEXP xSEXP, SEXP pSEXP, SEXP aSEXP, SEXP betaSEXP, SEXP deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type p(pSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(shortfall_cpp(x, p, a, beta, delta));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_cognitivemodels_ebm_cpp", (DL_FUNC) &_cognitivemodels_ebm_cpp, 10},
    {"_cognitivemodels_lexicographic", (DL_FUNC) &_cognitivemodels_lexicographic, 1},
    {"_cognitivemodels_indicators", (DL_FUNC) &_cognitivemodels_indicators, 2},
    {"_cognitivemodels_shortfall_cpp", (DL_FUNC) &_cognitivemodels_shortfall_cpp, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_cognitivemodels(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
