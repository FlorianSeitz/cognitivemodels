% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/model-baseline.R
\name{baseline_const_c}
\alias{baseline_const_c}
\alias{baseline_const_d}
\alias{baseline_mean_c}
\alias{baseline_mean_d}
\title{Baseline models}
\usage{
baseline_const_c(formula, const, data, ...)

baseline_const_d(formula, const, data, ...)

baseline_mean_c(formula, data, ...)

baseline_mean_d(formula, data, ...)
}
\arguments{
\item{formula}{A formula, the variable in \code{data} to be modeled. For example, \code{y ~ .} models a response variable \code{y} (note the \code{~ .} after the variable name).}

\item{const}{A number, the value to predict.}

\item{data}{A data frame.}

\item{options}{(optional) A list to change the parameter estimation, see \code{\link[=cm_options]{cm_options()}} or the section Options below.}
}
\value{
Returns a cognitive model object, which is an object of class \href{Cm}{cm}. A model, that has been assigned to \code{m}, can be summarized with \code{summary(m)} or \code{anova(m)}. The parameter space can be viewed using \code{parspace(m)}, constraints can be viewed using \code{constraints(m)}.
}
\description{
Fits baseline models. Baseline models are stimulus-agostic models used as sanity checks in cognitive model comparisons. Other cognitive models should beat a baseline model -- if not, the other cognitive models don't describe patterns in the responses well.
\itemize{
\item \code{baseline_const_c()} predicts a constant value for continuous responses.
\item \code{baseline_const_d()} predicts a constant value for discrete responses.
\item \code{baseline_mean_c()} fits the mean of the observed responses for continuous responses.
\item \code{baseline_mean_d()} fits the mean of the observed responses for discrete responses.
}
}
\details{
\code{baseline_const_c/d} predicts the value given in \code{const} for all trials. For example \code{const = 0.50} would predict \emph{Pr=0.50} for each trial, which is a commmon baseline model for tasks with two-outcome discrete choices.
}
\section{Options}{

The following can be passed in one list, e.g. \code{options = list(lb = c(k = -10))}.

\describe{
\item{\code{lb}}{Named numeric vector, sets the lower parameter bounds;
\code{lb = c(k = -10)} lets a parameter \emph{k} start at -10.}
\item{\code{ub}}{Named numeric vector, sets the upper parameter bounds:
\code{ub = c(k = 10)} lets a parameter \emph{k} go until 10.}
\item{\code{start}}{Named numeric vector, sets the start values of parameter:
\code{start = c(k = 5)} lets a parameter \emph{k} start at 5.}
\item{\code{fit}}{Logical (default \code{TRUE}), \code{fit = FALSE} disables parameter
estimation. Useful for testing models.}
\item{\code{fit_measure}}{A string (default \code{"loglikelihood"}), the goodness
of fit measure that is optimized during parameter estimation.
Can be one of the \code{types} in the function [cognitiveutils::gof()\verb{: }"loglikelihood"\verb{. Uses a binomial PDF in models with discrete  data. Uses a normal PDF \eqn{N(\mu, \sigma)} in models with  continuous data:  \eqn{\mu}=predictions, \eqn{\sigma}=constant, estimated as additional free paramter. To change the PDF set }fit_args = list(pdf = "")}
\item{\code{fit_args}}{Named list, options for parameter estimation. Can be
arguments to the function (gof())\code{\link[cognitiveutils:gof]{cognitiveutils::gof()}}.
\code{list(pdf = "truncnorm", a = 0, b = 1)} changes the PDF
in the log likelihood to a truncated normal between 0 and 1,
\code{list(pdf = "multinom")} changes it to a multinomial PDF.
\code{list(grid_offset = .01)} offsets the parameter in a grid search
by 0.01 from the parameter boundaries, \code{list(nsteps = 10)} defines
10 steps for each parameter in the regular grid in the grid search.}
\item{\code{fit_data}}{A data frame, the data to estimate the model parameters
from. Needed if the data for the parameter estimation differs from
the data in the main \code{data} argument in a model.}
\item{\code{solver}}{A string, the optimizer for the parameter estimation. Run
\code{cm_solvers()} to list all solvers. Can be \code{"grid"}, \code{"solnp"}
\code{"optimx"}, \code{"nloptr"}, \code{"nlminb"} and others from \link{ROI}. Can be
\code{c("grid", "xxx")}: a grid-plus-optimization: A grid search, followed
by an optimization with xxx using the \emph{n}
best solutions as start values in the optimization; the overal best
parameter set wins; and \emph{n} can be set in \code{solver_args$nbest}
Changing the solver may cause warnings and ignored parameter bounds.}
\item{\code{solver_args}}{A named list, additional arguments passed directly
to the solver function, see the pages of the solver to see which
arguments the solver function has. For example:
\code{list(offset = 0.01)} offset the parameters from their boundaries
when \code{solver = "grid"}.
\code{list(nsteps = 10)} uses 10 steps for each parameter in the regular
grid, for \code{solver = "grid"}), \code{list(nbest = 3)} uses the 3 best
parameter sets from the grid search as starting values in a
grid-plus-optimization solver, for \code{solver = c("grid", "xxx")}.
\code{list(control = )} control arguments in the solver
(solnp)\code{\link[Rsolnp:solnp]{Rsolnp::solnp()}} and the
(ROI solvers)\link{https://rdrr.io/cran/ROI/man/ROI_solve.html}}
}
}

\section{Parameter}{

\itemize{
\item \code{baseline_const_c/d} has no free parameter
\item \code{baseline_mean_c/d} has 1 free parameter, \code{mu}, the mean
\item \code{baseline_mean_c}, if estimated via log likelihood, has an additional free parameter, \code{sigma}, the standard deviation of the normal log likelihood.
}
}

\examples{
# Data D: let y hold the observed responses
# Make a model that predicts Pr = 0.50
D <- data.frame(y = c(1,1,0), x = c(1,2,3))
M <- baseline_const_d(y ~ ., const = 0.50, data = D)
predict(M)                         # predicts 0.5, 0.5, 0.5
npar(M)                            # 0 parameter
logLik(M)                          # log likelihood (binomial)

M <- baseline_mean_d(y ~ ., D)     # Pr = mean(observed variable)
predict(M)                         # predicts 0.66, 0.66, 0.66
coef(M)                            # mean counts as free parameter
npar(M)                            # 1 free parameter, the mean

}
\seealso{
Other cognitive models: 
\code{\link{Cm}},
\code{\link{bayes}()},
\code{\link{gcm}()}
}
\concept{cognitive models}
