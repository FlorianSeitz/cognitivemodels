data.long[,a]
i <- 1
data.long
data.long$y.zw[data.long[,a]==levels(data.long[,a])[i]]
for (i in 1:nlevels(data.long[,a])){
M.zw.adj[i] <- mean(data.long$y.zw[data.long[,a]==levels(data.long[,a])[i]])-b.zw*mean(data.long
$x.zw[data.long[,a]==levels(data.long[,a])[i]]) + b.zw*mean(data.long$x.zw)
}
quartz(); par(bty="n")
plot(data.long$x.zw, data.long$y.zw, pch=(1:nlevels(data.long[,a]))[data.long[,a]], col=(1:nlevels(data.long[,a]))[data.long[,a]],
xlab=paste(names(data.long)[x],".zw",sep=""), ylim=range(c(data.long$y.zw,M.zw.adj)), ylab=paste(names(data.long)[y],".zw",sep=""))
legend(x="topleft", bty="n", legend=levels(data.long[,a]), pch=1:nlevels(data.long[,a]), col=1:nlevels(data.long[,a]))
for (i in 1:nlevels(data.long[,a])){
points(x=mean(data.long$x.zw[data.long[,a]==levels(data.long[,a])[i]]), y=mean(data.long
$y.zw[data.long[,a]==levels(data.long[,a])[i]]), type="p", pch=16, col=i, cex=1.5)
abline(lm(data.long$y.zw[data.long[,a]==levels(data.long[,a])[i]]~data.long$x.zw[data.long[,a]==levels(data.long[,a])[i]]),
col=i, lwd=2)
}
grid()
y = 1:5
x = y*2
x^0.5 * y ^0.5
(x^0.5 + 3*(y^0.5))^2
library(data.table)
dt <- fread(input = "EMT experiment/data/1_version1_2019_Apr_15_1537.csv")
dt
View(df)
View(dt)
library(data.table)
dt <- fread(input = "EMT experiment/data/1_version1_2019_Apr_15_1551.csv")
View(dat)
View(dt)
dt <- fread(input = "EMT experiment/pairs_ecological_triplets.csv")
dt
dt <- fread(input = "EMT experiment/data/1_version1_2019_Apr_15_1551.csv")
View(dt)
install.packages("installr")
library(installr)
updateR()
library("ltm")
install.packages("metafor")
mahalanobis(c(2, 2), c(1, 1), cov = c(1, 0, 0, 1))
?mahalanobis
n <- 20
w1 <- seq(0.01, .99, .01)
dt <- data.table(id = 1:n,
c = rep(c(1, 0), each = n),
f1 = runif(n, 1, 2))
library(data.table)
dt <- data.table(id = 1:n,
c = rep(c(1, 0), each = n),
f1 = runif(n, 1, 2))
install.packages("data.table")
library(data.table)
dt <- data.table(id = 1:n,
c = rep(c(1, 0), each = n),
f1 = runif(n, 1, 2))
dt
dt[, f2 := runif(n, 1, 2)]
dt <- data.table(id = 1:n,
c = rep(c(1, 0), each = n),
f1 = runif(n, 1, 2), f2 = runif(n, 1, 2))
dt
cov(dt)
n <- 100
dt <- data.table(id = 1:n,
c = rep(c(1, 0), each = n),
f1 = runif(n, 1, 2), f2 = runif(n, 1, 2))
cov(dt)
mahalanobis(x = c(2, 2), center = c(mean(dt$f1), mean(dt$f2)), cov = cov(dt[, 3:4]))
mahalanobis(x = c(2, 1), center = c(mean(dt$f1), mean(dt$f2)), cov = cov(dt[, 3:4]))
mean(dt$f1), mean(dt$f2)
c(mean(dt$f1), mean(dt$f2))
?dist
install.packages("devtools")
devtools::install_github("JanaJarecki/cogscimodels")
devtools::install_github("JanaJarecki/cogsciutils")
setwd("cogscimodels/")
devtools::load_all()
calc_pred <- function(dt, par, newdata) {
r <- par["r"]; q <- par["q"]; lambda <- par["lambda"]; w <- par[c("f1", "f2")] # defines parameters
c_true <- which(!is.na(dt$c))
sapply(1:nrow(dt), function(i) {
p <- unlist(dt[i, 1:2]) # defines probe
if(!newdata & (i == 1 | length(intersect(c_true, 1:(i-1))) == 0)) {
return(mean(range(dt[c_true, "c"])))
} else {
if(!newdata) dt <- dt[intersect(c_true, 1:(i-1)), ] # use only previously seen exemplars with feedback
if(newdata) dt <- dt[c_true, ] # use only exemplars with feedback
x <- dt[, 1:2] # defines exemplars
dist <- as.matrix(abs(sweep(x, 2, p))) # calculates distance
dist <- ((dist^r) %*% w)^(1/r)
sim <- exp(-lambda * dist^q) # calculates similarity
return(as.vector((dt[, "c"] %*% sim) / sum(sim))) # makes prediction
}
})
}
dt <- data.frame(
f1 = c(1, 1, 2, 2),
f2 = c(1, 2, 1, 2),
rp = c(12, 14, 14, 16),
c = c(10, 20, 5, 15))
pars <- c(f1 = .5, f2  = .5, r = 1.5, q = 1.5, lambda = 1)
M <- ebm_j(rp ~ f1 + f2, ~c, data = dt, fix = pars)
tol <- .01
ebm_j(rp ~ f1 + f2, ~c, data = as.matrix(dt), fix = pars)
as.list(dt)
ebm_j(rp ~ f1 + f2, ~c, data = as.list(dt), fix = pars)
list(dt)
ebm_j(rp ~ f1 + f2, ~c, data = list(dt), fix = pars)
M <- ebm_j(rp ~ f1 + f2, ~c, data = list(dt), fix = pars)
dt <- data.frame(
f1 = c(1, 1, 2, 2),
f2 = c(1, 2, 1, 2),
rp = c(12, 14, 14, 16),
c = c(10, 20, 5, 15))
pars <- c(f1 = .5, f2  = .5, r = 1.5, q = 1.5, lambda = 1)
M <- ebm_j(rp ~ f1 + f2, ~c, data = list(dt), fix = pars)
tol <- .01
test_that("Prediction identities", {
expect_equal(M$predict(newdata = dt)[1], calc_pred(dt, pars, TRUE)[1], tol = tol)
expect_equal(M$predict(newdata = dt)[2], calc_pred(dt, pars, TRUE)[2], tol = tol)
expect_equal(M$predict(newdata = dt)[3], calc_pred(dt, pars, TRUE)[3], tol = tol)
expect_equal(M$predict(newdata = dt)[4], calc_pred(dt, pars, TRUE)[4], tol = tol)
expect_equal(M$predict(newdata = dt), calc_pred(dt, pars, TRUE), tol = tol)
expect_equal(M$predict()[1], calc_pred(dt, pars, FALSE)[1], tol = tol)
expect_equal(M$predict()[2], calc_pred(dt, pars, FALSE)[2], tol = tol)
expect_equal(M$predict()[3], calc_pred(dt, pars, FALSE)[3], tol = tol)
expect_equal(M$predict()[4], calc_pred(dt, pars, FALSE)[4], tol = tol)
})
test_that("Prediction identities after parameter change", {
expect_parchange_equal <- function(par, value, newdata = NULL) {
fix <- replace(pars, names(pars) == par, value)
M <- ebm_j(rp ~ f1 + f2, ~c, data = dt, fix = fix)
expect_equal(c(M$predict(newdata = newdata)), calc_pred(dt, fix, !is.null(newdata)), tol = tol)
}
expect_parchange_equal("f1", .001, dt)
expect_parchange_equal("f1", 1, dt)
expect_parchange_equal("f1", 0.25, dt)
expect_parchange_equal("f1", 0.75, dt)
expect_parchange_equal("f1", .001)
expect_parchange_equal("f1", 1)
expect_parchange_equal("f1", 0.25)
expect_parchange_equal("f1", 0.75)
expect_parchange_equal("f2", .001, dt)
expect_parchange_equal("f2", 1, dt)
expect_parchange_equal("f2", 0.25, dt)
expect_parchange_equal("f2", 0.75, dt)
expect_parchange_equal("f2", .001)
expect_parchange_equal("f2", 1)
expect_parchange_equal("f2", 0.25)
expect_parchange_equal("f2", 0.75)
expect_parchange_equal("lambda", .001, dt)
expect_parchange_equal("lambda", 10, dt)
expect_parchange_equal("lambda", 0.5, dt)
expect_parchange_equal("lambda", 5, dt)
expect_parchange_equal("lambda", .001)
expect_parchange_equal("lambda", 10)
expect_parchange_equal("lambda", 0.5)
expect_parchange_equal("lambda", 5)
expect_parchange_equal("r", 1, dt)
expect_parchange_equal("r", 2, dt)
expect_parchange_equal("r", 1.25, dt)
expect_parchange_equal("r", 1.75, dt)
expect_parchange_equal("r", 1)
expect_parchange_equal("r", 2)
expect_parchange_equal("r", 1.25)
expect_parchange_equal("r", 1.75)
expect_parchange_equal("q", 1, dt)
expect_parchange_equal("q", 2, dt)
expect_parchange_equal("q", 1.25, dt)
expect_parchange_equal("q", 1.75, dt)
expect_parchange_equal("q", 1)
expect_parchange_equal("q", 2)
expect_parchange_equal("q", 1.25)
expect_parchange_equal("q", 1.75)
})
M <- ebm_j(rp ~ f1 + f2, ~c, data = dt, fix = pars)
test_that("Prediction identities", {
expect_equal(M$predict(newdata = dt)[1], calc_pred(dt, pars, TRUE)[1], tol = tol)
expect_equal(M$predict(newdata = dt)[2], calc_pred(dt, pars, TRUE)[2], tol = tol)
expect_equal(M$predict(newdata = dt)[3], calc_pred(dt, pars, TRUE)[3], tol = tol)
expect_equal(M$predict(newdata = dt)[4], calc_pred(dt, pars, TRUE)[4], tol = tol)
expect_equal(M$predict(newdata = dt), calc_pred(dt, pars, TRUE), tol = tol)
expect_equal(M$predict()[1], calc_pred(dt, pars, FALSE)[1], tol = tol)
expect_equal(M$predict()[2], calc_pred(dt, pars, FALSE)[2], tol = tol)
expect_equal(M$predict()[3], calc_pred(dt, pars, FALSE)[3], tol = tol)
expect_equal(M$predict()[4], calc_pred(dt, pars, FALSE)[4], tol = tol)
})
test_that("Prediction identities after parameter change", {
expect_parchange_equal <- function(par, value, newdata = NULL) {
fix <- replace(pars, names(pars) == par, value)
M <- ebm_j(rp ~ f1 + f2, ~c, data = dt, fix = fix)
expect_equal(c(M$predict(newdata = newdata)), calc_pred(dt, fix, !is.null(newdata)), tol = tol)
}
expect_parchange_equal("f1", .001, dt)
expect_parchange_equal("f1", 1, dt)
expect_parchange_equal("f1", 0.25, dt)
expect_parchange_equal("f1", 0.75, dt)
expect_parchange_equal("f1", .001)
expect_parchange_equal("f1", 1)
expect_parchange_equal("f1", 0.25)
expect_parchange_equal("f1", 0.75)
expect_parchange_equal("f2", .001, dt)
expect_parchange_equal("f2", 1, dt)
expect_parchange_equal("f2", 0.25, dt)
expect_parchange_equal("f2", 0.75, dt)
expect_parchange_equal("f2", .001)
expect_parchange_equal("f2", 1)
expect_parchange_equal("f2", 0.25)
expect_parchange_equal("f2", 0.75)
expect_parchange_equal("lambda", .001, dt)
expect_parchange_equal("lambda", 10, dt)
expect_parchange_equal("lambda", 0.5, dt)
expect_parchange_equal("lambda", 5, dt)
expect_parchange_equal("lambda", .001)
expect_parchange_equal("lambda", 10)
expect_parchange_equal("lambda", 0.5)
expect_parchange_equal("lambda", 5)
expect_parchange_equal("r", 1, dt)
expect_parchange_equal("r", 2, dt)
expect_parchange_equal("r", 1.25, dt)
expect_parchange_equal("r", 1.75, dt)
expect_parchange_equal("r", 1)
expect_parchange_equal("r", 2)
expect_parchange_equal("r", 1.25)
expect_parchange_equal("r", 1.75)
expect_parchange_equal("q", 1, dt)
expect_parchange_equal("q", 2, dt)
expect_parchange_equal("q", 1.25, dt)
expect_parchange_equal("q", 1.75, dt)
expect_parchange_equal("q", 1)
expect_parchange_equal("q", 2)
expect_parchange_equal("q", 1.25)
expect_parchange_equal("q", 1.75)
})
expect_parchange_equal <- function(par, value, newdata = NULL) {
fix <- replace(pars, names(pars) == par, value)
M <- ebm_j(rp ~ f1 + f2, ~c, data = dt, fix = fix)
expect_equal(c(M$predict(newdata = newdata)), calc_pred(dt, fix, !is.null(newdata)), tol = tol)
}
expect_parchange_equal("f1", .001, dt)
value <- .001
par <- "f1"
expect_parchange_equal <- function(par, value, newdata = NULL) {
fix <- replace(pars, names(pars) == par, value)
print(fix)
M <- ebm_j(rp ~ f1 + f2, ~c, data = dt, fix = fix)
expect_equal(c(M$predict(newdata = newdata)), calc_pred(dt, fix, !is.null(newdata)), tol = tol)
}
expect_parchange_equal("f1", .001, dt)
expect_parchange_equal <- function(par, value, newdata = NULL) {
fix <- replace(pars, names(pars) == par, value)
fix[grepl("^f", names(fix)) & !grepl(par, names(fix))] <- 1 - value
print(fix)
M <- ebm_j(rp ~ f1 + f2, ~c, data = dt, fix = fix)
expect_equal(c(M$predict(newdata = newdata)), calc_pred(dt, fix, !is.null(newdata)), tol = tol)
}
expect_parchange_equal("f1", .001, dt)
expect_parchange_equal("f1", 1, dt)
expect_parchange_equal("f1", .999, dt)
test(filter = "ebm_j")
devtools::test(filter = "ebm_j")
getwd()
devtools::test(filter = "ebm_j")
expect_parchange_equal("lambda", .001, dt)
expect_parchange_equal("f2", 0.75)
expect_parchange_equal("lambda", .001, dt)
expect_parchange_equal("lambda", 10, dt)
expect_parchange_equal <- function(par, value, newdata = NULL) {
fix <- replace(pars, names(pars) == par, value)
if(par %in% c("f1", "f2")) fix[grepl("^f", names(fix)) & !grepl(par, names(fix))] <- 1 - value
print(fix)
M <- ebm_j(rp ~ f1 + f2, ~c, data = dt, fix = fix)
expect_equal(c(M$predict(newdata = newdata)), calc_pred(dt, fix, !is.null(newdata)), tol = tol)
}
expect_parchange_equal <- function(par, value, newdata = NULL) {
fix <- replace(pars, names(pars) == par, value)
if(par %in% c("f1", "f2")) fix[grepl("^f", names(fix)) & !grepl(par, names(fix))] <- 1 - value # this is a hack
M <- ebm_j(rp ~ f1 + f2, ~c, data = dt, fix = fix)
expect_equal(c(M$predict(newdata = newdata)), calc_pred(dt, fix, !is.null(newdata)), tol = tol)
}
devtools::test(filter = "ebm_j")
devtools::test(filter = "ebm_j")
dt[c(1, 3), "c"] <- NA
dt
M <- ebm_j(rp ~ f1 + f2, ~c, data = dt, fix = pars)
M$predict(newdata = dt)
calc_pred(dt, pars, TRUE)
M$predict()
calc_pred(dt, pars, FALSE)
dt[2, "c"] <- 30
M <- ebm_j(rp ~ f1 + f2, ~c, data = dt, fix = pars)
test_that("Partial feedback", {
expect_equal(M$predict(newdata = dt)[1], calc_pred(dt, pars, TRUE)[1], tol = tol)
expect_equal(M$predict(newdata = dt)[2], calc_pred(dt, pars, TRUE)[2], tol = tol)
expect_equal(M$predict(newdata = dt)[3], calc_pred(dt, pars, TRUE)[3], tol = tol)
expect_equal(M$predict(newdata = dt)[4], calc_pred(dt, pars, TRUE)[4], tol = tol)
expect_equal(M$predict(newdata = dt), calc_pred(dt, pars, TRUE), tol = tol)
expect_equal(M$predict()[1], calc_pred(dt, pars, FALSE)[1], tol = tol)
expect_equal(M$predict()[2], calc_pred(dt, pars, FALSE)[2], tol = tol)
expect_equal(M$predict()[3], calc_pred(dt, pars, FALSE)[3], tol = tol)
expect_equal(M$predict()[4], calc_pred(dt, pars, FALSE)[4], tol = tol)
expect_equal(M$predict(), calc_pred(dt, pars, FALSE), tol = tol)
})
M$predict()
dt[2, "c"] <- 20
M <- ebm_j(rp ~ f1 + f2, ~c, data = dt, fix = pars)
M$predict()
dt
calc_pred(dt, pars, FALSE)
ebm_j(rp ~ f1 + f2, ~c, data = as.matrix(dt[1, ]), fix = pars)
test_that("Prediction identities matrix", {
expect_pred_equivalent <- function(data, result, newdata = NULL) {
M <- ebm_j(rp ~ f1 + f2, ~c, data = as.matrix(data), fix = pars)
expect_equivalent(M$predict(newdata = newdata), result, tol=tol)
}
expect_pred_equivalent(dt[1, ], calc_pred(dt[1, ], pars, FALSE))
expect_pred_equivalent(dt[2, ], calc_pred(dt[2, ], pars, FALSE))
expect_pred_equivalent(dt[3, ], calc_pred(dt[3, ], pars, FALSE))
expect_pred_equivalent(dt[4, ], calc_pred(dt[4, ], pars, FALSE))
expect_pred_equivalent(dt[1, ], calc_pred(dt[1, ], pars, TRUE), newdata = dt[1, ])
expect_pred_equivalent(dt[2, ], calc_pred(dt[2, ], pars, TRUE), newdata = dt[2, ])
expect_pred_equivalent(dt[3, ], calc_pred(dt[3, ], pars, TRUE), newdata = dt[3, ])
expect_pred_equivalent(dt[4, ], calc_pred(dt[4, ], pars, TRUE), newdata = dt[4, ])
expect_pred_equivalent(dt, calc_pred(dt, pars, FALSE))
expect_pred_equivalent(dt, calc_pred(dt, pars, TRUE), newdata = dt)
expect_pred_equivalent(dt[4:1, ], calc_pred(dt[4:1, ], pars, FALSE))
expect_pred_equivalent(dt[4:1, ], calc_pred(dt[4:1, ], pars, TRUE), newdata = dt[4:1, ])
expect_pred_equivalent(dt[c(2,1,4,3), ], calc_pred(dt[c(2,1,4,3), ], pars, FALSE))
expect_pred_equivalent(dt[c(2,1,4,3), ], calc_pred(dt[c(2,1,4,3), ], pars, TRUE), newdata = dt[c(2,1,4,3), ])
})
expect_pred_equivalent(dt[1, ], calc_pred(dt[1, ], pars, FALSE))
expect_pred_equivalent <- function(data, result, newdata = NULL) {
M <- ebm_j(rp ~ f1 + f2, ~c, data = as.matrix(data), fix = pars)
expect_equivalent(M$predict(newdata = newdata), result, tol=tol)
}
expect_pred_equivalent(dt[1, ], calc_pred(dt[1, ], pars, FALSE))
calc_pred(dt[1, ], pars, FALSE)
expect_pred_equivalent(dt[1, ], calc_pred(dt[1, ], pars, TRUE), newdata = dt[1, ])
as.matrix(dt[1, ])
dt <- as.matrix(dt[1, ])
par <- pars
newdata = FALSE
r <- par["r"]; q <- par["q"]; lambda <- par["lambda"]; w <- par[c("f1", "f2")] # defines parameters
dt$c
dt[, "c"]
c_true <- which(!is.na(dt[, "c"]))
c_true
calc_pred <- function(dt, par, newdata) {
r <- par["r"]; q <- par["q"]; lambda <- par["lambda"]; w <- par[c("f1", "f2")] # defines parameters
c_true <- which(!is.na(dt[, "c"]))
sapply(1:nrow(dt), function(i) {
p <- unlist(dt[i, 1:2]) # defines probe
if(!newdata & (i == 1 | length(intersect(c_true, 1:(i-1))) == 0)) {
return(mean(range(dt[c_true, "c"])))
} else {
if(!newdata) dt <- dt[intersect(c_true, 1:(i-1)), ] # use only previously seen exemplars with feedback
if(newdata) dt <- dt[c_true, ] # use only exemplars with feedback
x <- dt[, 1:2] # defines exemplars
dist <- as.matrix(abs(sweep(x, 2, p))) # calculates distance
dist <- ((dist^r) %*% w)^(1/r)
sim <- exp(-lambda * dist^q) # calculates similarity
return(as.vector((dt[, "c"] %*% sim) / sum(sim))) # makes prediction
}
})
}
dt <- data.frame(
f1 = c(1, 1, 2, 2),
f2 = c(1, 2, 1, 2),
rp = c(12, 14, 14, 16),
c = c(10, 20, 5, 15))
pars <- c(f1 = .5, f2  = .5, r = 1.5, q = 1.5, lambda = 1)
test_that("Prediction identities data frame", {
expect_pred_equivalent <- function(data, result, newdata = NULL) {
M <- ebm_j(rp ~ f1 + f2, ~c, data = as.data.frame(data), fix = pars)
expect_equivalent(M$predict(newdata = newdata), result, tol=tol)
}
expect_pred_equivalent(dt[1, ], calc_pred(dt[1, ], pars, FALSE))
expect_pred_equivalent(dt[2, ], calc_pred(dt[2, ], pars, FALSE))
expect_pred_equivalent(dt[3, ], calc_pred(dt[3, ], pars, FALSE))
expect_pred_equivalent(dt[4, ], calc_pred(dt[4, ], pars, FALSE))
expect_pred_equivalent(dt[1, ], calc_pred(dt[1, ], pars, TRUE), newdata = dt[1, ])
expect_pred_equivalent(dt[2, ], calc_pred(dt[2, ], pars, TRUE), newdata = dt[2, ])
expect_pred_equivalent(dt[3, ], calc_pred(dt[3, ], pars, TRUE), newdata = dt[3, ])
expect_pred_equivalent(dt[4, ], calc_pred(dt[4, ], pars, TRUE), newdata = dt[4, ])
expect_pred_equivalent(dt, calc_pred(dt, pars, FALSE))
expect_pred_equivalent(dt, calc_pred(dt, pars, TRUE), newdata = dt)
expect_pred_equivalent(dt[4:1, ], calc_pred(dt[4:1, ], pars, FALSE))
expect_pred_equivalent(dt[4:1, ], calc_pred(dt[4:1, ], pars, TRUE), newdata = dt[4:1, ])
expect_pred_equivalent(dt[c(2,1,4,3), ], calc_pred(dt[c(2,1,4,3), ], pars, FALSE))
expect_pred_equivalent(dt[c(2,1,4,3), ], calc_pred(dt[c(2,1,4,3), ], pars, TRUE), newdata = dt[c(2,1,4,3), ])
})
test_that("Prediction identities data table", {
expect_pred_equivalent <- function(data, result, newdata = NULL) {
M <- ebm_j(rp ~ f1 + f2, ~c, data = as.data.table(data), fix = pars)
expect_equivalent(M$predict(newdata = newdata), result, tol=tol)
}
expect_pred_equivalent(dt[1, ], calc_pred(dt[1, ], pars, FALSE))
expect_pred_equivalent(dt[2, ], calc_pred(dt[2, ], pars, FALSE))
expect_pred_equivalent(dt[3, ], calc_pred(dt[3, ], pars, FALSE))
expect_pred_equivalent(dt[4, ], calc_pred(dt[4, ], pars, FALSE))
expect_pred_equivalent(dt[1, ], calc_pred(dt[1, ], pars, TRUE), newdata = dt[1, ])
expect_pred_equivalent(dt[2, ], calc_pred(dt[2, ], pars, TRUE), newdata = dt[2, ])
expect_pred_equivalent(dt[3, ], calc_pred(dt[3, ], pars, TRUE), newdata = dt[3, ])
expect_pred_equivalent(dt[4, ], calc_pred(dt[4, ], pars, TRUE), newdata = dt[4, ])
expect_pred_equivalent(dt, calc_pred(dt, pars, FALSE))
expect_pred_equivalent(dt, calc_pred(dt, pars, TRUE), newdata = dt)
expect_pred_equivalent(dt[4:1, ], calc_pred(dt[4:1, ], pars, FALSE))
expect_pred_equivalent(dt[4:1, ], calc_pred(dt[4:1, ], pars, TRUE), newdata = dt[4:1, ])
expect_pred_equivalent(dt[c(2,1,4,3), ], calc_pred(dt[c(2,1,4,3), ], pars, FALSE))
expect_pred_equivalent(dt[c(2,1,4,3), ], calc_pred(dt[c(2,1,4,3), ], pars, TRUE), newdata = dt[c(2,1,4,3), ])
})
test_that("Prediction identities tibble", {
expect_pred_equivalent <- function(data, result, newdata = NULL) {
M <- ebm_j(rp ~ f1 + f2, ~c, data = as_tibble(data), fix = pars)
expect_equivalent(M$predict(newdata = newdata), result, tol=tol)
}
expect_pred_equivalent(dt[1, ], calc_pred(dt[1, ], pars, FALSE))
expect_pred_equivalent(dt[2, ], calc_pred(dt[2, ], pars, FALSE))
expect_pred_equivalent(dt[3, ], calc_pred(dt[3, ], pars, FALSE))
expect_pred_equivalent(dt[4, ], calc_pred(dt[4, ], pars, FALSE))
expect_pred_equivalent(dt[1, ], calc_pred(dt[1, ], pars, TRUE), newdata = dt[1, ])
expect_pred_equivalent(dt[2, ], calc_pred(dt[2, ], pars, TRUE), newdata = dt[2, ])
expect_pred_equivalent(dt[3, ], calc_pred(dt[3, ], pars, TRUE), newdata = dt[3, ])
expect_pred_equivalent(dt[4, ], calc_pred(dt[4, ], pars, TRUE), newdata = dt[4, ])
expect_pred_equivalent(dt, calc_pred(dt, pars, FALSE))
expect_pred_equivalent(dt, calc_pred(dt, pars, TRUE), newdata = dt)
expect_pred_equivalent(dt[4:1, ], calc_pred(dt[4:1, ], pars, FALSE))
expect_pred_equivalent(dt[4:1, ], calc_pred(dt[4:1, ], pars, TRUE), newdata = dt[4:1, ])
expect_pred_equivalent(dt[c(2,1,4,3), ], calc_pred(dt[c(2,1,4,3), ], pars, FALSE))
expect_pred_equivalent(dt[c(2,1,4,3), ], calc_pred(dt[c(2,1,4,3), ], pars, TRUE), newdata = dt[c(2,1,4,3), ])
})
library(devtools)
test_that("Prediction identities tibble", {
expect_pred_equivalent <- function(data, result, newdata = NULL) {
M <- ebm_j(rp ~ f1 + f2, ~c, data = as_tibble(data), fix = pars)
expect_equivalent(M$predict(newdata = newdata), result, tol=tol)
}
expect_pred_equivalent(dt[1, ], calc_pred(dt[1, ], pars, FALSE))
expect_pred_equivalent(dt[2, ], calc_pred(dt[2, ], pars, FALSE))
expect_pred_equivalent(dt[3, ], calc_pred(dt[3, ], pars, FALSE))
expect_pred_equivalent(dt[4, ], calc_pred(dt[4, ], pars, FALSE))
expect_pred_equivalent(dt[1, ], calc_pred(dt[1, ], pars, TRUE), newdata = dt[1, ])
expect_pred_equivalent(dt[2, ], calc_pred(dt[2, ], pars, TRUE), newdata = dt[2, ])
expect_pred_equivalent(dt[3, ], calc_pred(dt[3, ], pars, TRUE), newdata = dt[3, ])
expect_pred_equivalent(dt[4, ], calc_pred(dt[4, ], pars, TRUE), newdata = dt[4, ])
expect_pred_equivalent(dt, calc_pred(dt, pars, FALSE))
expect_pred_equivalent(dt, calc_pred(dt, pars, TRUE), newdata = dt)
expect_pred_equivalent(dt[4:1, ], calc_pred(dt[4:1, ], pars, FALSE))
expect_pred_equivalent(dt[4:1, ], calc_pred(dt[4:1, ], pars, TRUE), newdata = dt[4:1, ])
expect_pred_equivalent(dt[c(2,1,4,3), ], calc_pred(dt[c(2,1,4,3), ], pars, FALSE))
expect_pred_equivalent(dt[c(2,1,4,3), ], calc_pred(dt[c(2,1,4,3), ], pars, TRUE), newdata = dt[c(2,1,4,3), ])
})
test_that("Prediction identities matrix", {
expect_pred_equivalent <- function(data, result, newdata = NULL) {
M <- ebm_j(rp ~ f1 + f2, ~c, data = as.matrix(data), fix = pars)
expect_equivalent(M$predict(newdata = newdata), result, tol=tol)
}
expect_pred_equivalent(dt[1, ], calc_pred(dt[1, ], pars, FALSE))
expect_pred_equivalent(dt[2, ], calc_pred(dt[2, ], pars, FALSE))
expect_pred_equivalent(dt[3, ], calc_pred(dt[3, ], pars, FALSE))
expect_pred_equivalent(dt[4, ], calc_pred(dt[4, ], pars, FALSE))
expect_pred_equivalent(dt[1, ], calc_pred(dt[1, ], pars, TRUE), newdata = dt[1, ])
expect_pred_equivalent(dt[2, ], calc_pred(dt[2, ], pars, TRUE), newdata = dt[2, ])
expect_pred_equivalent(dt[3, ], calc_pred(dt[3, ], pars, TRUE), newdata = dt[3, ])
expect_pred_equivalent(dt[4, ], calc_pred(dt[4, ], pars, TRUE), newdata = dt[4, ])
expect_pred_equivalent(dt, calc_pred(dt, pars, FALSE))
expect_pred_equivalent(dt, calc_pred(dt, pars, TRUE), newdata = dt)
expect_pred_equivalent(dt[4:1, ], calc_pred(dt[4:1, ], pars, FALSE))
expect_pred_equivalent(dt[4:1, ], calc_pred(dt[4:1, ], pars, TRUE), newdata = dt[4:1, ])
expect_pred_equivalent(dt[c(2,1,4,3), ], calc_pred(dt[c(2,1,4,3), ], pars, FALSE))
expect_pred_equivalent(dt[c(2,1,4,3), ], calc_pred(dt[c(2,1,4,3), ], pars, TRUE), newdata = dt[c(2,1,4,3), ])
})
?as_tibble
library(dplyr)
test_that("Prediction identities tibble", {
expect_pred_equivalent <- function(data, result, newdata = NULL) {
M <- ebm_j(rp ~ f1 + f2, ~c, data = as_tibble(data), fix = pars)
expect_equivalent(M$predict(newdata = newdata), result, tol=tol)
}
expect_pred_equivalent(dt[1, ], calc_pred(dt[1, ], pars, FALSE))
expect_pred_equivalent(dt[2, ], calc_pred(dt[2, ], pars, FALSE))
expect_pred_equivalent(dt[3, ], calc_pred(dt[3, ], pars, FALSE))
expect_pred_equivalent(dt[4, ], calc_pred(dt[4, ], pars, FALSE))
expect_pred_equivalent(dt[1, ], calc_pred(dt[1, ], pars, TRUE), newdata = dt[1, ])
expect_pred_equivalent(dt[2, ], calc_pred(dt[2, ], pars, TRUE), newdata = dt[2, ])
expect_pred_equivalent(dt[3, ], calc_pred(dt[3, ], pars, TRUE), newdata = dt[3, ])
expect_pred_equivalent(dt[4, ], calc_pred(dt[4, ], pars, TRUE), newdata = dt[4, ])
expect_pred_equivalent(dt, calc_pred(dt, pars, FALSE))
expect_pred_equivalent(dt, calc_pred(dt, pars, TRUE), newdata = dt)
expect_pred_equivalent(dt[4:1, ], calc_pred(dt[4:1, ], pars, FALSE))
expect_pred_equivalent(dt[4:1, ], calc_pred(dt[4:1, ], pars, TRUE), newdata = dt[4:1, ])
expect_pred_equivalent(dt[c(2,1,4,3), ], calc_pred(dt[c(2,1,4,3), ], pars, FALSE))
expect_pred_equivalent(dt[c(2,1,4,3), ], calc_pred(dt[c(2,1,4,3), ], pars, TRUE), newdata = dt[c(2,1,4,3), ])
})
test(filter = "ebm_j")
?gcm
dt
dt[c(1, 3), "c"] <- NA
dt
load("data/gp2012.RData")
gp2012
soft5 <- gp2012[, as.list(coef(fit_soft[[1]])), by = list(repetition, subject)]
soft5
gp2012[, as.list(loglik(fit_soft[[1]])), by = list(repetition, subject)]
gp2012[, as.list(logLik(fit_soft[[1]])), by = list(repetition, subject)]
soft5 <- gp2012[, as.list(coef(fit_soft[[1]])), by = list(repetition, subject)]
soft5 <- gp2012[, as.list(logLik(fit_soft[[1]])), by = list(repetition, subject)]
soft5 <- gp2012[, as.list(logLik(fit_soft[[1]])), by = list(repetition, subject)]
soft5 <- soft5[, -2][, lapply(.SD, median), by = repetition]
soft5
